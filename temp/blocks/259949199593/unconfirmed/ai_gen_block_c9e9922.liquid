{% doc %}
  @prompt
    Create a product addon section that displays products from a specific collection (saree-addons) below the main add to cart button. Include checkboxes for each addon product so customers can select multiple items. When the main add to cart button is clicked, it should add both the main product and any selected addon products to the cart simultaneously. The section should be visually integrated with the existing product page design., images are not showing and price is showing 100 times less

{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-product-addons-{{ ai_gen_id }} {
    margin-top: {{ block.settings.margin_top }}px;
    padding: {{ block.settings.padding }}px;
    background-color: {{ block.settings.background_color }};
    border-radius: {{ block.settings.border_radius }}px;
    border: {{ block.settings.border_width }}px solid {{ block.settings.border_color }};
  }

  .ai-product-addons__header-{{ ai_gen_id }} {
    margin-bottom: 20px;
  }

  .ai-product-addons__title-{{ ai_gen_id }} {
    font-size: {{ block.settings.title_size }}px;
    font-weight: 600;
    color: {{ block.settings.text_color }};
    margin: 0 0 8px 0;
  }

  .ai-product-addons__description-{{ ai_gen_id }} {
    font-size: {{ block.settings.description_size }}px;
    color: {{ block.settings.text_color }};
    opacity: 0.8;
    margin: 0;
  }

  .ai-product-addons__grid-{{ ai_gen_id }} {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 16px;
  }

  .ai-product-addon-item-{{ ai_gen_id }} {
    display: flex;
    align-items: center;
    padding: 16px;
    border: 2px solid {{ block.settings.item_border_color }};
    border-radius: {{ block.settings.item_border_radius }}px;
    background-color: {{ block.settings.item_background_color }};
    transition: all 0.3s ease;
    cursor: pointer;
  }

  .ai-product-addon-item-{{ ai_gen_id }}:hover {
    border-color: {{ block.settings.item_hover_border_color }};
    background-color: {{ block.settings.item_hover_background_color }};
  }

  .ai-product-addon-item-{{ ai_gen_id }}.selected {
    border-color: {{ block.settings.item_selected_border_color }};
    background-color: {{ block.settings.item_selected_background_color }};
  }

  .ai-product-addon__checkbox-{{ ai_gen_id }} {
    margin-right: 12px;
    width: 18px;
    height: 18px;
    accent-color: {{ block.settings.checkbox_color }};
  }

  .ai-product-addon__image-{{ ai_gen_id }} {
    width: 60px;
    height: 60px;
    margin-right: 12px;
    flex-shrink: 0;
  }

  .ai-product-addon__image-{{ ai_gen_id }} img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 4px;
  }

  .ai-product-addon__image-placeholder-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    background-color: #f4f4f4;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 4px;
  }

  .ai-product-addon__image-placeholder-{{ ai_gen_id }} svg {
    width: 30px;
    height: 30px;
    opacity: 0.5;
  }

  .ai-product-addon__info-{{ ai_gen_id }} {
    flex-grow: 1;}

  .ai-product-addon__title-{{ ai_gen_id }} {
    font-size: 14px;
    font-weight: 500;
    color: {{ block.settings.text_color }};
    margin: 0 0 4px 0;
    line-height: 1.3;
  }

  .ai-product-addon__price-{{ ai_gen_id }} {
    font-size: 14px;
    font-weight: 600;
    color: {{ block.settings.price_color }};
    margin: 0;
  }

  .ai-product-addons__total-{{ ai_gen_id }} {
    margin-top: 20px;
    padding-top: 16px;
    border-top: 1px solid {{ block.settings.border_color }};
    text-align: right;
  }

  .ai-product-addons__total-label-{{ ai_gen_id }} {
    font-size: 16px;
    font-weight: 600;
    color: {{ block.settings.text_color }};
    margin: 0;
  }

  .ai-product-addons__total-price-{{ ai_gen_id }} {
    font-size: 18px;
    font-weight: 700;
    color: {{ block.settings.price_color }};
    margin: 4px 0 0 0;
  }

  .ai-product-addons__loading-{{ ai_gen_id }} {
    text-align: center;
    padding: 20px;
    color: {{ block.settings.text_color }};opacity: 0.7;
  }

  @media screen and (max-width: 749px) {
    .ai-product-addons__grid-{{ ai_gen_id }} {
      grid-template-columns: 1fr;
    }

    .ai-product-addon-item-{{ ai_gen_id }} {
      padding: 12px;
    }

    .ai-product-addon__image-{{ ai_gen_id }} {
      width: 50px;
      height: 50px;
    }
  }
{% endstyle %}

<product-addons-{{ ai_gen_id }}
  class="ai-product-addons-{{ ai_gen_id }}"
  data-collection-handle="saree-addons"
  {{ block.shopify_attributes }}
>
  <div class="ai-product-addons__header-{{ ai_gen_id }}">
    {% if block.settings.title != blank %}
      <h3 class="ai-product-addons__title-{{ ai_gen_id }}">{{ block.settings.title }}</h3>
    {% endif %}
    {% if block.settings.description != blank %}
      <p class="ai-product-addons__description-{{ ai_gen_id }}">{{ block.settings.description }}</p>
    {% endif %}
  </div>

  <div class="ai-product-addons__content-{{ ai_gen_id }}">
    <div class="ai-product-addons__loading-{{ ai_gen_id }}">Loading addon products...</div>
  </div>
</product-addons-{{ ai_gen_id }}>

<script>
  (function() {
    class ProductAddons{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.selectedAddons = new Set();
        this.addonProducts = [];
        this.mainProductPrice = 0;
      }

      connectedCallback() {
        this.collectionHandle = this.dataset.collectionHandle;
        this.loadAddonProducts();
        this.setupMainProductIntegration();
      }

      async loadAddonProducts() {
        try {
          const response = await fetch(`/collections/${this.collectionHandle}/products.json`);
          const data = await response.json();
          this.addonProducts = data.products;
          this.renderAddonProducts();
        } catch (error) {
          console.error('Error loading addon products:', error);this.querySelector('.ai-product-addons__content-{{ ai_gen_id }}').innerHTML = 
            '<div class="ai-product-addons__loading-{{ ai_gen_id }}">Unable to load addon products.</div>';
        }
      }

      renderAddonProducts() {
        const content = this.querySelector('.ai-product-addons__content-{{ ai_gen_id }}');
        
        if (this.addonProducts.length === 0) {
          content.innerHTML = '<div class="ai-product-addons__loading-{{ ai_gen_id }}">No addon products available.</div>';
          return;
        }

        const grid = document.createElement('div');
        grid.className = 'ai-product-addons__grid-{{ ai_gen_id }}';

        this.addonProducts.forEach(product => {
          const item = this.createAddonItem(product);
          grid.appendChild(item);
        });

        const total = this.createTotalSection();
        
        content.innerHTML = '';
        content.appendChild(grid);
        content.appendChild(total);
      }

      createAddonItem(product) {
        const item = document.createElement('div');
        item.className = 'ai-product-addon-item-{{ ai_gen_id }}';
        item.dataset.productId = product.id;
        item.dataset.variantId = product.variants[0].id;
        item.dataset.price = product.variants[0].price;

        const checkbox = document.createElement('input');
        checkbox.type = 'checkbox';
        checkbox.className = 'ai-product-addon__checkbox-{{ ai_gen_id }}';
        checkbox.dataset.productId = product.id;

        const imageDiv = document.createElement('div');
        imageDiv.className = 'ai-product-addon__image-{{ ai_gen_id }}';
        
        if (product.featured_image) {
          const img = document.createElement('img');
          const imageUrl = product.featured_image.replace('.jpg', '_100x100.jpg').replace('.png', '_100x100.png').replace('.webp', '_100x100.webp');
          img.src = imageUrl;
          img.alt = product.title;
          img.loading = 'lazy';
          imageDiv.appendChild(img);
        } else {
          const placeholder = document.createElement('div');
          placeholder.className = 'ai-product-addon__image-placeholder-{{ ai_gen_id }}';
          placeholder.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
              <circle cx="8.5" cy="8.5" r="1.5"></circle>
              <polyline points="21,15 16,10 5,21"></polyline>
            </svg>
          `;
          imageDiv.appendChild(placeholder);
        }

        const info = document.createElement('div');
        info.className = 'ai-product-addon__info-{{ ai_gen_id }}';
        
        const title = document.createElement('h4');
        title.className = 'ai-product-addon__title-{{ ai_gen_id }}';
        title.textContent = product.title;
        
        const price = document.createElement('p');
        price.className = 'ai-product-addon__price-{{ ai_gen_id }}';
        price.textContent = this.formatPrice(product.variants[0].price);

        info.appendChild(title);
        info.appendChild(price);

        item.appendChild(checkbox);
        item.appendChild(imageDiv);
        item.appendChild(info);

        item.addEventListener('click', (e) => {
          if (e.target.type !== 'checkbox') {
            checkbox.checked = !checkbox.checked;
          }
          this.handleAddonSelection(checkbox, item);
        });

        checkbox.addEventListener('change', () => {
          this.handleAddonSelection(checkbox, item);
        });

        return item;
      }

      createTotalSection() {
        const total = document.createElement('div');
        total.className = 'ai-product-addons__total-{{ ai_gen_id }}';
        total.style.display = 'none';

        const label = document.createElement('p');
        label.className = 'ai-product-addons__total-label-{{ ai_gen_id }}';
        label.textContent = 'Total addon cost:';

        const price = document.createElement('p');
        price.className = 'ai-product-addons__total-price-{{ ai_gen_id }}';
        price.textContent = this.formatPrice(0);

        total.appendChild(label);
        total.appendChild(price);

        return total;
      }

      handleAddonSelection(checkbox, item) {
        const productId = checkbox.dataset.productId;
        
        if (checkbox.checked) {
          this.selectedAddons.add(productId);
          item.classList.add('selected');
        } else {
          this.selectedAddons.delete(productId);
          item.classList.remove('selected');
        }

        this.updateTotal();
      }

      updateTotal() {
        const totalSection = this.querySelector('.ai-product-addons__total-{{ ai_gen_id }}');
        const totalPrice = this.querySelector('.ai-product-addons__total-price-{{ ai_gen_id }}');
        
        if (this.selectedAddons.size > 0) {
          let total = 0;
          this.selectedAddons.forEach(productId => {
            const item = this.querySelector(`[data-product-id="${productId}"]`);
            total += parseInt(item.dataset.price);
          });
          totalPrice.textContent = this.formatPrice(total);
          totalSection.style.display = 'block';
        } else {
          totalSection.style.display = 'none';
        }
      }

      setupMainProductIntegration() {
        const productForm = document.querySelector('form[action*="/cart/add"]');
        if (!productForm) return;

        productForm.addEventListener('submit', async (e) => {
          if (this.selectedAddons.size > 0) {
            e.preventDefault();
            await this.addProductsToCart(productForm);
          }
        });
      }

      async addProductsToCart(productForm) {
        try {
          const formData = new FormData(productForm);
          const items = [];

          items.push({
            id: formData.get('id'),
            quantity: parseInt(formData.get('quantity')) || 1
          });

          this.selectedAddons.forEach(productId => {
            const item = this.querySelector(`[data-product-id="${productId}"]`);
            items.push({
              id: parseInt(item.dataset.variantId),
              quantity: 1
            });
          });

          const response = await fetch('/cart/add.js', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ items })
          });

          if (response.ok) {
            const event = new CustomEvent('cart:added', {
              detail: { items }
            });document.dispatchEvent(event);
            
            if (window.location.pathname.includes('/cart')) {
              window.location.reload();
            } else {
              const cartDrawer = document.querySelector('cart-drawer');
              if (cartDrawer && typeof cartDrawer.open === 'function') {
                cartDrawer.open();
              } else {
                window.location.href = '/cart';
              }
            }
          } else {
            throw new Error('Failed to add items to cart');
          }
        } catch (error) {
          console.error('Error adding products to cart:', error);
          productForm.submit();
        }
      }

      formatPrice(priceInCents) {
        const shopCurrency = window.Shopify?.currency?.active || 'USD';
        const priceInDollars = priceInCents / 100;
        
        return new Intl.NumberFormat('en-US', {
          style: 'currency',
          currency: shopCurrency,
          minimumFractionDigits: 2
        }).format(priceInDollars);
      }
    }

    customElements.define('product-addons-{{ ai_gen_id }}', ProductAddons{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Product Addons",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Content"
    },
    {
      "type": "inline_richtext",
      "id": "title",
      "label": "Title",
      "default": "Complete Your Look"
    },
    {
      "type": "inline_richtext",
      "id": "description",
      "label": "Description",
      "default": "Add these perfect accessories to complement your saree"
    },
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "range",
      "id": "margin_top",
      "min": 0,
      "max": 60,
      "step": 4,
      "unit": "px",
      "label": "Top margin",
      "default": 32
    },
    {
      "type": "range",
      "id": "padding",
      "min": 0,
      "max": 40,
      "step": 4,
      "unit": "px",
      "label": "Padding",
      "default": 20
    },
    {
      "type": "range",
      "id": "border_width",
      "min": 0,
      "max": 4,
      "step": 1,
      "unit": "px",
      "label": "Border width",
      "default": 1
    },
    {
      "type": "range",
      "id": "border_radius",
      "min": 0,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Border radius",
      "default": 8
    },
    {
      "type": "range",
      "id": "item_border_radius",
      "min": 0,
      "max": 16,
      "step": 2,
      "unit": "px",
      "label": "Item border radius",
      "default": 6
    },
    {
      "type": "header",
      "content": "Colors"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "price_color",
      "label": "Price color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "border_color",
      "label": "Border color",
      "default": "#e0e0e0"
    },
    {
      "type": "color",
      "id": "checkbox_color",
      "label": "Checkbox color",
      "default": "#000000"
    },
    {
      "type": "header",
      "content": "Item Colors"
    },
    {
      "type": "color",
      "id": "item_background_color",
      "label": "Item background",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "item_border_color",
      "label": "Item border",
      "default": "#e0e0e0"
    },
    {
      "type": "color",
      "id": "item_hover_background_color",
      "label": "Item hover background",
      "default": "#f8f8f8"
    },
    {
      "type": "color",
      "id": "item_hover_border_color",
      "label": "Item hover border",
      "default": "#cccccc"
    },
    {
      "type": "color",
      "id": "item_selected_background_color",
      "label": "Item selected background",
      "default": "#f0f8ff"
    },
    {
      "type": "color",
      "id": "item_selected_border_color",
      "label": "Item selected border",
      "default": "#0066cc"
    },
    {
      "type": "header",
      "content": "Typography"
    },
    {
      "type": "range",
      "id": "title_size",
      "min": 14,
      "max": 32,
      "step": 2,
      "unit": "px",
      "label": "Title size",
      "default": 20
    },
    {
      "type": "range",
      "id": "description_size",
      "min": 12,
      "max": 18,
      "step": 1,
      "unit": "px",
      "label": "Description size",
      "default": 14
    }
  ],
  "presets": [
    {
      "name": "Product Addons"
    }
  ]
}
{% endschema %}